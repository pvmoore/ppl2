
import core.intrinsics

 // Module scope

int globalVar1
globalFunc1 = {}

struct Struct = [
    // Can see struct scope + module scope
    int memberVar1
    memberFunc = { // Struct* this
        // Struct member func
        // Can see this scope, Struct scope and module scope

        int memberFuncVar1

        memberFuncVar1
        //memberFuncVar2 // not visible
        globalVar1
        globalVar2
        memberVar1
        memberVar2
        globalFunc1()
        globalFunc2()

        inner = { // Struct* this
            // inner function
            // Can see this scope, Struct scope and module scope

            int innerVar1

            innerVar1  // ok
            //innerVar2  // nope
            memberVar1  // ok
            memberVar2  // ok
            // memberFunc1() // ok but will recurse
            memberFunc2()

            int innerVar2
        }

        inner()

        int memberFuncVar2
    }
    memberFunc2 = {}
    int memberVar2
]

func = { // {->}
    // Can see this scope and module scope

    int funcVar1

    f1 = {
        // Can see this scope and module scope
        int f1var

        f1var
        //funcVar1 // not visible
        //funcVar2 // not visible
        globalVar1
        globalVar2
        //inner() // not visible
    }

    funcVar1
    //funcVar2 // not visible
    globalVar1
    globalVar2

    inner = {
        // Can see this scope and module scope

        int innerVar1
        f3 = {}

        innerVar1
        //innerVar2 // nope
        //f1var     // nope
        globalVar1
        globalVar2
        globalFunc1()
        globalFunc2()
        //f1()      // nope
        //f2()      // nope
        f3()        // ok

        int innerVar2
    }
    int funcVar2
    f2 = {}

    funcVar2

    inner()
}

int globalVar2
globalFunc2 = {
    inner = {}
    inner()
}

testClosures = {
    var closure1 = { int a -> return 2 }
    var closure2 = { int a -> return 3 }
    {int->int} funcptr = closure2

    assert 2 == closure1(1)
    assert 3 == closure2(1)
    assert 3 == funcptr(1)
}

public testInnerFunctions = {
    testClosures()

    Struct s
    s.memberFunc()
    s.memberVar1
    s.memberVar2

    func()      // ok
    //inner()   // not visible
}
