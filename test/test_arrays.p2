
import core.c
import core.intrinsics

public

testArrays = {
    declarations = {
        [:int 2] a

        [:int 2] b    = [: 1,3]
        var c         = [: 7,13,17]
        var d         = [: 1, 3.3, true]

        [:int 9]* e   = null
        [:int] f      = [: 1,2]             // [:int 2]
        var g         = [: 1 as int,2,3]    // [:int 3]
    }
    arrayOfArray = {
        [:[:int 3] 1] a
        assert a:0 is [:int]
        assert a:0 is [:int 3]
        var b = a:0:1
        assert b==0
    }
    anonStructOfArray = {
        [:[int a, float b] 2] a
        assert a.length==2
        assert a:0 is [int,float]
        assert a:0:0 is int
        assert a:0:1 is float
        assert a:0.a is int
        assert a:0.b is float

        assert a:0:0 == 0

        var b = a:0
    }
    namedStructOfArray = {
        struct SOA = [
            [:int 5] array
        ]
        [:SOA 2] soa = [:
            SOA(),
            SOA()
        ]
        assert soa.length==2
        assert soa:0 is SOA
        assert soa:1 is SOA
        assert soa:0.array.length==5
        assert soa:0:0.length==5
        assert soa:0:0 is [:int 5]
        assert soa:1:0 is [:int 5]
        assert soa:0:0:0 is int

        soa:0:0 = [:1,2,3,4,5]
        soa:1:0 = [:10,20,30,40,50]

        var z1 = soa:0:0:0
        assert z1 == 1
        assert soa:0:0:1 == 2
        assert soa:0.array:1 == 2

        assert soa:0:0 is [: 1 as int,2,3,4,5]
        assert soa:1:0 is [: 10 as int,20,30,40,50]
    }
    arrayLength = {
        [:int 4] a

        var len = a.length
        assert len==4

        var b = [: 0,1,2,3,4,5]
        assert b.length == 6

        assert [: 1,2,3].length==3
        assert [:int 5].length==5
    }
    shouldNotCompile = {
        // no count
        //[:int] e


    }
    declarations()
    arrayOfArray()
    anonStructOfArray()
    namedStructOfArray()
    arrayLength()
    shouldNotCompile()

    testLiteralArrays()
}
private
testLiteralArrays = {
    test1 = {
        // zero initialised
        [:int 2] array
        assert array:0 == 0
        assert array:1 == 0
        int n = 0
        assert array:n == 0
        assert array.length==2
        assert array.subtype is int
        assert array.#size==8

        [:int 2]* ptr
        assert ptr is null

        ptr = &[: 3 as int, 7]

        assert ptr:0 is [:int 2]
        assert ptr:0:0 == 3
        assert ptr:0:1 == 7
        assert ptr.length==2
    }
    test2 = {
        // initialised
        [:int 2] array = [: 5, 10]

        assert array:0 == 5
        assert array:1 == 10
        assert array:0 is int
        assert array:1 is int

        var b = [:3, 7]
        assert b is [:byte 2]
        assert b:0 == 3
        assert b:1 == 7
    }
    test3 = {
        // sparse initialised
        [:int 5] a = [: 2=1, 4=2]
        assert a:0==0
        assert a:1==0
        assert a:2==1
        assert a:3==0
        assert a:4==2
    }
    test4 = { [:int 2] a ->
        assert a:0 == 77
        assert a:1 == 88
    }
    test5 = {
        [:99,100]
        var a = [:101,102]:0
        assert a==101
    }
    test6 = {
        // empty array literal
        [:int 1] a = [:]
        assert a:0 == 0

        // too few values
        [:float 3] b = [: 7]
        assert b:0 == 7
        assert b:1 == 0
        assert b:2 == 0

        b = [:8,3]
        assert b:0 == 8
        assert b:1 == 3
        assert b:2 == 0

        b = [:]
        assert b:0 == 0
        assert b:1 == 0
        assert b:2 == 0
    }
    test7 = {

    }
    shouldNotCompile = {
        //[:int 1] a
        //var b = a:1 // out of bounds

        //var a = [:] // cannot infer

        //[:int 2] a = [: 1,2,3] // too many values
        //[:int 5] a = [: 5=1] // to many values

        //[:int 2] a = [: 1, 1f] // bad cast
    }
    test1()
    test2()
    test3()
    test4([: 77 as int, 88] as [:int 2])
    test5()
    test6()
    test7()
    shouldNotCompile()
}
