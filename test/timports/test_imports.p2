
import timports::test_imports2
import imp = timports::test_imports4

public

testImports {
	println("testImports()")
	func { return -1 }
	assert -1 == func()
	
	assert 1 == imp.func()
	assert 2 == imp.func2<int>(2)
	assert 2 == imp.func2(2.1)
	
	alias Wabbit  = imp.Rabbit
	alias Wabbits = imp.Rabbit* 
	Wabbit wabbit
	Wabbits wabbits
	
	imp.Rabbit rabbit
	imp.Rabbit* rabbits
	var rabbit2 = imp.Rabbit()
	assert rabbit2 is imp.Rabbit
	
	assert 12 == imp.Rabbit.b
	assert 11 == imp.Rabbit.bar(1)
	
	alias Wadger  = imp.Badger<int>
	alias Wadgers = imp.Badger<float>*
	Wadger wadger
	Wadgers wadgers
	assert wadger is imp.Badger<int>
	assert wadgers is imp.Badger<float>*
	
	assert 22 == imp.Badger<int>.b
	assert 21 == imp.Badger<int>.bar(10)
	assert 23 == imp.Badger<double>.baz<bool>(3.1, true)
	
	imp.Badger<int>.b = 80
	imp.Badger<float>.b = 81
	assert imp.Badger<int>.b == 80
	imp.Badger<float>.b == 81
	
	imp.Skunk<imp.Rabbit*> skunkRabbit
	imp.Skunk<imp.Rabbit*>* skunkRabbit2
	
	var skr = imp.Skunk<imp.Rabbit>.a 
}

bool isit = false

struct Dog {
public
    int age
}
struct Cat {
public
    bool isGinger
}
struct Bat {
public
    float size
}
struct Pig {
public
    int weight
}
struct Wolf {
public
    bool isGrey
}
struct Rose <T> {
public
    T a
}

alias AnInt = int
alias IntPtrPtr = IntPtr*
alias ANiceRose = OrangeRose
alias BlueRose = RedRose<bool>

importedFunc {

}

// global function templates
tfunc <T> { T a ->
    return 200
}
tfunc <A,B> { A a, B b ->
    return 202
}
tfunc { float f ->
    return 201
}
struct M3 <T> {
public
    T t
    foo { T a ->
        return 270
    }
    foo <A> { A a, T t ->
        return 271
    }
    foo <A,B> { A a, B b ->
        return 272
    }
}
