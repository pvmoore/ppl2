
private
struct Vector = <T> [
    T x
    T y
    T z

    operator+ = { T scalar ->
        Vector<T> vec
        vec.x = x+scalar
        vec.y = y+scalar
        vec.z = z+scalar
        return vec
    }
    test = {
        var v = operator+(2)
        assert v.x==2 and v.y==2 and v.z==2
    }
]

public
testOperatorOverloading = {
    value = {
        Vector<float> v
        assert v.x==0 and v.y==0 and v.z==0

        var v2 = v + 1
        assert v2.x==1 and v2.y==1 and v2.z==1

        var v3 = v.operator+(1)
        assert v3.x==1 and v3.y==1 and v3.z==1
    }
    ptr = {
        var v = Vector<float>*()
        assert v.x==0 and v.y==0 and v.z==0

        var v3 = v.operator+(1)
    }
    internal = {
        var v = Vector<float>()
        v.test()
    }
    value()
    ptr()
    internal()
}
