
import timports::test_imports

public

struct M1 {
    foo { int a->
        return 10
    }
    foo <T> { T a ->
        return 20
    }
    foo <A,B> { A a, B b ->
        return 30
    }
    foo0 <A> { int a, int b, [A,A] c ->
        return 40
    }
    foo0 <A> { int a, {A,A->A} b ->
        return 50
    }
    bar {
        // internal standard call
        assert 10 == foo(1)

        // internal templated call
        assert 20 == foo<double>(4.5)
        assert 30 == foo<int, float>(1,2)

        // internal implicit template call foo<T>(T)
        assert 20 == foo(3.1)
        assert 30 == foo(1,2)

        //foo()     // No 0 arg func or template

        assert 1 == func<byte>(1 as byte)   // calls func<byte>(byte)
        assert 2 == func(1 as byte)          // calls func(float)

        // implicit
        assert 40 == foo0(1, 1, [1,1] as struct)
        assert 50 == foo0(1, {int a, int b -> return a+b})
    }
}
struct M2 <T> {
    T t
    foo <F> { F a ->
        return 100
    }
    foo <A,B> { A a, B b ->
        return 101
    }
    foo { float f ->
        return 102
    }
}
//struct BadTemplate <int> {}

testTemplateFunctions {
    globals {
        // templated function
        assert 1 == func<int>(3)
        assert 1 == func<float>(3.1)
        assert 3 == func<int,double>(1,2.2)
        // untemplated function
        assert 2 == func(3.2)

        // imported templated function
        assert 200 == tfunc<bool>(true)
        assert 202 == tfunc<double,float>(1,2)
        // imported untemplated function
        assert 201 == tfunc(3.1)
    }
    structs {
        M1 m = M1()
        // templated function
        assert 20 == m.foo<float>(3.1)
        assert 20 == m.foo<byte>(4 as byte)
        assert 30 == m.foo<double,int>(2.1, 4)
        // untemplated function
        assert 10 == m.foo(1)

        // can bar to test struct->struct funcs
        m.bar()

        // templated struct
        M2<double> m2 = M2<double>()
        assert 100 == m2.foo<short>(18 as short)
        assert 101 == m2.foo<bool,int>(false,2)
        assert 102 == m2.foo(4.3)

        // imported struct
        var m3 = M3<int>()
        assert 270 == m3.foo(2)
        assert 271 == m3.foo<float>(3.1, 3)
        assert 272 == m3.foo<int,bool>(6,true)
    }
    implicitStandard {
        // there is no func(double)
        // but there is a func<T>(T)
        assert 1 == func(40.0d)
        assert 3 == func(true, false)

        //func(1,2,3)   // No template exists with 3 args
        //func()        // No 0 arg func or template

        // calls func<int>(int*)
        int* a
        assert 4 == func<int>(a)

        assert 5 == func2(1, 1, [1,1] as struct) // <int>(int,int,[int,int])
        assert 5 == func2<float>(1,1, [1.1,2.2] as struct)

        assert 6 == func2(1, {float a, float b -> return a+b})   // <float>(int,{float,bool}*)
        assert 6 == func2<byte>(2 as byte, {byte a, byte b->return 1 as byte})

        assert 7 == func3([1,2], 3d) // func3<int,double>(int[2])
        assert 7 == func3<float,bool>([1.1,2.2], true)
    }
    implicitStruct {
        M1 m1

        // there is no foo(float)
        // call template foo<T>(T)
        assert 20 == m1.foo(3.1)

        // call template foo<A,B>(A,B)
        assert 30 == m1.foo(1, true)

        //m1.foo(1,2,3) // No template exists with 3 args
        //m1.foo()      // No 0 arg func or template


    }
    //badTemplate = <M1> {}

    globals()
    structs()
    implicitStandard()
    implicitStruct()
}

func <T> { T a ->
    return 1
}
func <T> { T* a ->
    return 4
}
func <A,B> { A a, B b ->
    return 3
}
func2 <A> { int a, int b, [A,A] c ->
    return 5
}
func2 <A> { int a, {A,A->A} c ->
    return 6
}
func3 <A,B> { A[2] a, B b ->
    return 7
}
func { float a ->
    return 2
}
