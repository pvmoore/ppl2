
// Element type is int
enum A { 
    ONE,        // 0
    TWO,        // 1
    THREE = 5,  // 5
    FOUR,       // 6
    FIVE = 2,   // 2
    SIX         // 3
}
// Element type is byte
enum B : byte {
    ONE,        // 0
    TWO,        // 1
    THREE       // 2
}
enum C : float {
    ONE,        // 0.0
    TWO = 10,   // 10.0
    THREE       // 11.0
}
enum D : long {
    ONE   = 1 << 0,     // 1
    TWO   = 1 << 1,     // 2
    THREE = 1 << 2,     // 4
    FOUR  = 1 << 3      // 8
}
//enum D : bool {}
//enum E : int* {}
//enum G : String {}
//enum G : String* {}

//enum Nope <T> { ONE}           // No template params allowed
//enum Nope2 : void { ONE }      // void not allowed
//enum Nope3 {}                  // Cannot be empty

public testEnum {
    initialisation {
        var a = A::SIX          ; assert a is A;    assert a.value == 3
        var b = a               ; assert b is A;    assert b.value == 3
        var c = A::FIVE.value   ; assert c is int;  assert c == 2
        
        A d
        A e = A::THREE          ; assert e.value == 5
        //A f = A             // nope
        //A g = B::ONE        // incompatible types
            
        C f = C::THREE          ; assert f.value is float;  assert f.value == 11.0
    }
    comparison {
        // is
        // Must be exact enum type and value
        var a = A::ONE is A::ONE        ; assert a
        var b = A::ONE is not A::TWO    ; assert b 
        var c = A::ONE is not B::ONE    ; assert c
        
        // booleans
        // Compares values regardless of enum type
        var g  = A::ONE == B::ONE   ; assert g is bool; assert g
        var g2 = A::ONE <> B::TWO   ; assert g2 is bool; assert g2
        var g3 = A::ONE < A::TWO    ; assert g3
        var g4 = A::THREE > A::TWO  ; assert g4
        var h = A::SIX
        var i = B::TWO
        assert h == A::SIX        
        assert h >= i
    }
    conversion {
        var a = A::THREE as int ; assert a == 5
        var b = 4 as A          ; assert b is A;    assert b == 4; assert b.value == 4
        var c = A::FOUR as B    ; assert c is B;    assert c.value == 6
    }
    manipulation {
        var a = A::TWO + A::TWO     ; assert a is A;    assert a.value == 2
        var b = D::ONE | D::TWO     ; assert b is D;    assert b.value == 3
        A c = A::TWO + 1            ; assert c.value == 2 
        
        c = c + A::TWO              ; assert c.value == 3
        
        // op assign
        b += D::THREE               ; assert b is D;    assert b.value == 7
        b += 1                      ; assert b is D;    assert b.value == 8 
        
        var d = D::ONE | D::TWO | D::THREE  ; assert d is D; assert d.value == 7
    }
    misc {
        assert #sizeof(A) == 4 
        assert #sizeof(A::ONE) == 4 
            
        alias A2 = A
        A2 a2 = A::ONE;   assert a2 is A
            

    }
    functionParams {
        foo { int a -> return 0 }
        foo { A a -> return 1 }
        foo { B b -> return 2 }   
        foo { A a, B b -> return 3+a+b }
        
        assert 0 == foo(1)
        assert 1 == foo(A::ONE)
        assert 2 == foo(B::TWO)
        assert 3+5+0 == foo(A::THREE, B::ONE)
    }
    properties {
        assert A.length == 6
        assert B.length == 3 
        assert C.length == 3
        assert D.length == 4
    }
    constValues {
        const VALUE = 3
        enum Enum {
            A = VALUE    
        }   
        assert Enum::A == 3
    }
    imported {
        import timports::test_imports2
        Colour col = Colour::GREEN;     assert col == 1
    }
    initialisation()
    comparison()
    conversion()
    manipulation()
    misc()
    functionParams()  
    properties()
    constValues()
    imported()
}
