
public

struct Access {
// private
    int a
    foo = {}
    foo = <T> { T t -> }
readonly
    int b
    foo1 = {
        // i can see private member
        a
        a += 1
    }
    foo1 = <T> { T t -> }
public
    int c
    foo2 = {}
    foo2 = <T> { T t -> }
private
    int d
    foo3 = {}
    foo3 = <T> { T t -> }
public
}

struct Access2 <T> {
// private
    T a
    foo = {}
    foo = <U> { U u -> }
public
    T b
    foo1 = {}
    foo1 = <U> { U u -> }
readonly
    T c
}

testAccess2 = {
    // Access within same module is ok
    Access a

    // call access
    a.foo()
    a.foo1()
    a.foo2()
    a.foo3()

    // explicit template call
    a.foo<int>(1)
    a.foo1<int>(1)
    a.foo2<int>(1)
    a.foo3<int>(1)

    // implicit template call
    a.foo(1)
    a.foo1(1)
    a.foo2(1)
    a.foo3(1)

    // read access
    a.a
    a.b
    a.c
    a.d

    // write access
    a.a += 1
    a.b += 1
    a.c += 1
    a.d += 1

    // same for templated structs
    Access2<int> a2
    a2.foo()
    a2.foo1()
    a2.foo<int>(1)
    a2.foo1<int>(1)
    a2.foo(1)
    a2.foo1(1)
    a2.a
    a2.b
    a2.c
    a2.a += 1
    a2.b += 1
    a2.c += 1
}
