@module(priority=10)

public

@inline(false)
testAttributes {
    func()
    func2()   
    func3()
    
    int v = 0
    
    @expect(true)
    if(v<2) {
        
    }
        
    testPack()
    testPOD()
}

private

@inline(true)
func {
    
}
@inline(false)
func2 {
    
}
func3 {

}

@pack
struct A {      // size = 9, align = 4
    byte a      // 0
    short b     // 1
    int c       // 3
    byte d      // 7
    byte e      // 8
}
struct B {      // size = 12, align = 4
    byte a      // 0
    short b     // 2
    int c       // 4
    byte d      // 8
}
struct C {     // size = 24, align = 8     
    byte a     // offset 0, size 1, align 1
    short b    // offset 2, size 2, align 2
    long c     // offset 8, size 8, align 8
    byte d     // offset 16, size 1, align 1
}
struct D {     // size = 1, align = 1 
    byte a     // offset 0, size 1, align 1
}
struct E {    // size = 0, align = 1   
}
struct F {  // size = 40, align = 8   
    short a // offset 0, size 2, align 2
    C b     // offset 8, size 24, align 8
    byte c  // offset 32, size 1, align 1
}
struct G {  // size = 16, align 4
    byte a  // offset 0, size 1, align 1
    A b     // offset 4, size 9, align 4
    byte c  // offset 13, size 1, align 1 
}

@inline(false)
testPack {
    A a = A()
    a.a = 1 as byte
    a.b = 2 as short
    a.c = 3
    a.d = 4 as byte
    B b = B()
    b.a = 1 as byte
    b.b = 2 as short
    b.c = 3
    b.d = 4 as byte
    C c = C()
    c.a = 1 as byte
    c.b = 2 as short
    c.c = 3
    c.d = 4 as byte
    D d = D()
    E e = E()
    F f = F()
    
    assert #sizeof(A)==9
    assert #sizeof(B)==12  
    assert #sizeof(C)==24   
    assert #sizeof(D)==1   
    assert #sizeof(E)==0 
    assert #sizeof(F)==40
    assert #sizeof(G)==16
    
    assert #alignof(A) == 4
    assert #alignof(B) == 4
    assert #alignof(C) == 8
    assert #alignof(D) == 1
    assert #alignof(E) == 1
    assert #alignof(F) == 8
    assert #alignof(G) == 4
}
@pod struct H {
    // default visibility of a POD is public
    int a = 100
    int b = 101   
    int c = 102
}
testPOD {
    var h0 = H(1,2,3)
    assert h0.a == 1
    assert h0.b == 2
    assert h0.c == 3
    
    var h1 = H*(1,2,3)
    assert h1.a == 1
    assert h1.b == 2
    assert h1.c == 3

    var h2 = H(a:1, b:2, c:3)
    assert h2.a == 1
    assert h2.b == 2
    assert h2.c == 3
    
    // mix up the names
    var h3 = H(c:1, b:3, a:7)
    assert h3.a == 7
    assert h3.b == 3
    assert h3.c == 1
    
    // partial initialisation
    var h4 = H(1,2)
    assert h4.a == 1
    assert h4.b == 2
    assert h4.c == 102
    
    var h5 = H(1)
    assert h5.a == 1
    assert h5.b == 101
    assert h5.c == 102
    
    var h6 = H()
    assert h6.a == 100
    assert h6.b == 101
    assert h6.c == 102
    
    var h7 = H*()
    assert h7.a == 100
    assert h7.b == 101
    assert h7.c == 102
    
    var h8 = H(c:50)
    assert h8.a == 100
    assert h8.b == 101
    assert h8.c == 50
    
    //var h = H(1,2,3,4) // too many initialisers
    //var h = H(a:1, b:2, c:3, d:4) // d not found
    //var h = H(a:1, b:2, c:3, c:4) // dupliate name
}
