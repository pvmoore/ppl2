
import core.intrinsics
import core.string

public

testLiteralStruct = {

    test1 = {
        // zero initialised
        [bool a, int b, float c] s

        assert s.a==false
        assert s.b==0
        assert s.c==0.0f

        assert s:0 is bool
        assert s:1 is int
        assert s:2 is float

        assert s:0==false
        assert s:1==0
        assert s:2==0.0f
    }
    test2 = {
        // user initialised
        [int a, double b] s = [1,2]

        assert s.a==1
        assert s.b==2.0d

        assert s.a is int
        assert s.b is double

        assert s:0==1
        assert s:1==2d
    }
    test3 = {
        // name=value
        [int a, float b, bool c] s =
            [c=true, b=3.1f, a=1]

        assert s.a==1
        assert s.b==3.1f
        assert s.c==true

        assert s:0==1
        assert s:1==3.1f
        assert s:2==true

    }
    test4 = {
        // partial initialisation
        [double a, int b, bool c] s =
            [3.1d]

        assert s.a==3.1d
        assert s.b==0
        assert s.c==false

        [double a, int b, bool c] s2 =
            [c=true]

        assert s2.a==0
        assert s2.b==0
        assert s2.c==true
    }
    test5  = {
        // empty struct literals
        [int] s = []
        assert s is [int]
        assert s:0 == 0

        //assert #length(s)==1
        //assert s.#length==1
        //assert #size(s)==4

        var s2 = []

        //assert #length(s2)==0
        //assert #size(s2)==0
    }
    test6 = {
        // implicit [byte,byte]
        var s = [7,8]
        assert s:0 is byte
        assert s:1 is byte

        // implicit [int,byte]
        var s2 = [7 as int, 8]
        assert s2:0 is int
        assert s2:1 is byte
    }
    test7 = {
        // s is [bool, float, long]
        var s = [true,2f,3L]
        s = [true]

        assert s:0 == true
        assert s:1 == 0f
        assert s:2 == 0L
    }
    test8 = {
        // standalone
        [7,8]

        // index standalone
        var s = [9,10]:1
        assert s is byte
        assert s==10
    }
    shouldNotCompile = {
        // error mixing initialisation
        //[int a,int b] ss = [a=4, 3]

        // too many values
        //[int] s = [1,2]

        // bad casts
        //[int] s = [3.1f]
        //[float a, int b] s = [b=3.14f]
    }
    test1()
    test2()
    test3()
    test4()
    test5()
    test6()
    test7()
    test8()
    shouldNotCompile()
}
