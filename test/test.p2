
/*
main {
    import test_implicit_template_funcs
    testImplicitTemplateFunctions()
} 
*/


var s = "hello"

import imports::imports             // Bat, Cat, Dog, IntPtrPtr, Wolf, importedFunc()
import nodes::literals       
import test_arrays  
import test_consts    

alias AA = int 
alias BB = AA*     // int*  
alias CC = BB      // int*
alias DD = CC*     // int**
DD dd              // int**
alias EE = IntPtrPtr* 
EE ee              // int*** 

// declare for later
struct Gold
struct Gold // ok 

struct Silver {
    Gold* gold
}
struct Gold { // definition
    Silver* silver
}
Gold gold

// Module init function
new  {
    // All module variable initialisation
    // code will be put in here
    boop += 7
}

struct Goal {
    int scorer
}

struct Animal {
    int age
    int[4] s
    Goal g
    [int,bool] anon
    bark { // Animal* this
        assert true
    }
}
alias AnimalPtr = Animal*
alias IntPtr    = int*

dothings { int a, Animal animal ->
    int local
    return animal
}

int boop = 1

alias Unref = int
Unref unr = 77

unreferencedFunc {
    [bool,bool] a
}

struct Thingy {
    int a
    {void->int} b = { return 1 }
    //new = { Thingy* this }    // implicit
}

myfunc { bool flag ->
    return flag
}

someArrays {
    int[5] array
    var a2 = [1,2]  // int[2]
}

struct Array <A,B> {
    A a
    B b 
}

main {
    GC.start()
    
    var mem = GC.alloc(1000)
    var size = GC.getSize(mem)
    assert size==1000
    
    GC.stop()
    
    //GC gc = GC()
    
    
    import misc::misc;              testMisc()
    import misc::builtin_funcs;     testBuiltinFuncs() 
    import nodes::select;           testSelect()
    import functions::closures;     testClosures()
    import test_enum;               testEnum()
    import misc::attributes;        testAttributes()
    import misc::ptr_arithmetic;    testPtrArithmetic()
    import misc::escape_analysis;   testEscapees()
    
    import texpr = test_expressions
    texpr.testExpressions()
    
    testLiterals()
    testConsts()
    testArrays()
	
    testGlobals {
        assert dd is int**
        assert ee is int***
    }
    test0 {
        int a1 = 3
        int b1 = a1 - 2

        myfunc(true)

        [int, float] anon

        Animal* animal
        Animal** animal2
        AnimalPtr animalPtr
        IntPtr ip
        
        var animal3 = Animal()
        animal3.bark()
        dothings(0, animal3)

        Thingy thingy = Thingy()
        thingy.a = 9

        someArrays()
    }
    test1 {
        {void->int} b = { return 1 }
    }
    test2 {
        {void->[int a,int b]} f = {
            return [1,2]
        }

        var r = f()
        [int a, float b] r2 = r as [int,float]

        var a = r.a
        var b = r.b
        assert a==1
        assert b==2

        assert r2.a==1

        // reinterpret cast int to float won't be 2
        //assert r2.b==2
    }
    test3 {
        struct Listy <T> {
            T length
        }

        Listy<int> list = Listy<int>()
        Array<int,float> array
        Rose<int> rose
        ANiceRose anicerose
        Listy<BlueRose> blueList
        Listy<Listy<int>> listoflist
    }
    test4 {
        //float2 v2
        //float3 v3
        //float4 v4
        //float8 v8
    }
    testInnerImport {
        import imports::imports3

        assert 77 == i3func()
        I3Object obj = I3Object()
    }

    testGlobals()
    test0()
    test1()
    test2()
    test3()
    test4()
    testInnerImport()

    import access::access
    testAccess()

    testModules()
    testStatements()
    testExpressions() 
    testFunctions()
    testStructures()
    testTemplates()
    testCore()
}
bool yop

testModules {
    import misc::unreferenced_module

    testImports()
    
    importedFunc()  
    
    Cat cat             // from test_imports
    Dog dog1 = Dog()
    dog1.age += 1
    
    Dog* dog2 = null     // from test_imports
    dog2 = &dog1
    dog2 = null
    
    var dog3 = Dog*()
    
    alias GreyWolf = Wolf
    GreyWolf wolf
    
    [int, Bat berty] bertyStruct
}
testStatements {
    import l = nodes::loop, 
           v = nodes::variable

    l.testLoop()
    v.testVariables()
}
testExpressions {
    import nodes::as, 
           nodes::if, 
           tuples::literal_tuple   
    
    testAs()
    testIf()
    testLiteralTuple()
}
testFunctions {
    import functions::calls, functions::inner_functions

    testCalls()
    testInnerFunctions()
}
testStructures {
    import structs::structs, 
           structs::constructors, 
           structs::statics, 
           structs::operator_overloading

    testStructs()
    testConstructors()
    testStatics()
    testOperatorOverloading()
}
testTemplates {
    import templates::template_functions, 
           templates::template_structs,
           templates::implicit_template_funcs
           
    testTemplateStructs()
    testTemplateFunctions()
    testImplicitTemplateFunctions()
}
testCore {
    import core_::console, 
           core_::list, 
           core_::string, 
           core_::unsigned

    testConsole()   
    testList()   
    testString()
    testUnsigned()
}






/*
    // inferred return type
    // {void->}
    // {void->var}
    // {->}
    {bool->} funcptr = { bool b ->
        // do the thing
        return 99
    }

    // Fixme - this is unknown and is replaced. It needs to be
    // coerced if possible, if not then an error shown
    {var->} hello = { int a -> return 700 }

    // call the function ptr
    funcptr(true)

    {void->Pig**} piggywiggy
    {void->Pig} piggywiggy2


    var a = null as Pig*

    [:Bat 3] zz

    int inty
    {void->void} funky
    Bat batty
    Bat* battyptr
    [:int 1] arrayy
    [int a,bool b] structy

    int* ptr

    //var v0 =
    ptr:0

    alias Wazzer = float
    alias Zipper = Wazzer
    alias Zippers = Zipper*

    //Wazzer myWazzer
    //Zipper zipper
    //Zippers zips
    */////////////////////////////////////////////////////////////////





//Animal = [
//    int a
//    int b
//    foo = { int c -> return true }
//]
//Dog = Animal
//K = int
//K z = 7
//var a = 0
//var b = a
//int c
//[bool,bool] someBools
//bool result = false

////////////////////////////////////////////////////////////////////////////
/*
alias Dog = [
    int a
    int b
]
Dog dog = [1,2]
*///////////////////////////////////////////////


/*
public

K = int
L = K
M = {int->bool}
N = [int:10]   // static array
SS = <T> [
private             // only visible within this module
    T a
    int d
readonly            // read only outside this module, read/write inside
    float b
public              // read and write outside this module
    [int,float] c

    // this is a function variable
    {int->bool} foo = { wibble ->
        import core thing3
        return true
    }
    // This is a struct variable with an implicit this*
    // {SS* this, int foo -> int}
    func = { int foo ->
        alias R = float
        return 0
    }
]
private D = [float a]
E = double

//----------------------------------------- module variables

// All module scope vars are private
// All module scope vars must either:
//      1) Have no initialiser
//      2) Have a simple initialiser or
//      3) Have a parenthesised initialiser
// Move all initialisation into module function but leave declarations.
[int] Y
[bool,int] Z      = [true,9]
int G1            = 3 + 1
{int->int} func2  = { a -> return 1 }
{int->void} func3 = { it -> }

//----------------------------------------- functions
module = {  // module initialiser
    int a
    int b = 0

    //Y = [0]
    //Z = [true,0]
    //G1 = 4
    //func2 = { a -> return a }
    //func3 = { a -> }
}
main = {    // {void->void}
    //int a = 0
    //var b = 1

    //SS ss = SS()
    //var s2 = SS*()

    //var s3 = as<int>(3.4)

    //if(a==0) {
    //} else {
    //}
}
min = <T> { T a, T b ->
    return a
}
min = <T> { T a, T b, T c ->
    return 0
}
*///////////////////////////////////////////////
