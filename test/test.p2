
/*
main {
    import test_implicit_template_funcs
    testImplicitTemplateFunctions()
} 
*/

var s = "hello"

import imports::imports             // Bat, Cat, Dog, IntPtrPtr, Wolf, importedFunc()
import nodes::literals       
import test_arrays  
import test_consts    

alias AA = int 
alias BB = AA*     // int*  
alias CC = BB      // int*
alias DD = CC*     // int**
DD dd              // int**
alias EE = IntPtrPtr* 
EE ee              // int*** 

// declare for later
struct Gold
struct Gold // ok 

struct Silver {
    Gold* gold
}
struct Gold { // definition
    Silver* silver
}
Gold gold

// Module init function
new  {
    // All module variable initialisation
    // code will be put in here
    boop += 7
}

struct Goal {
    int scorer
}

struct Animal {
    int age
    int[4] s
    Goal g
    [int,bool] anon
    bark { // Animal* this
        assert true
    }
}
alias AnimalPtr = Animal*
alias IntPtr    = int*

dothings { int a, Animal animal ->
    int local
    return animal
}

int boop = 1

alias Unref = int
Unref unr = 77

unreferencedFunc {
    [bool,bool] a
}

struct Thingy {
    int a
    {void->int} b = { return 1 }
    //new = { Thingy* this }    // implicit
}

myfunc { bool flag ->
    return flag
}

someArrays {
    int[5] array
    var a2 = [1,2]  // int[2]
}

struct Array <A,B> {
    A a
    B b 
}

main {
    import misc::misc;              testMisc()
    import misc::builtin_funcs;     testBuiltinFuncs() 
    import nodes::select;           testSelect()
    import functions::closures;     testClosures()
    import test_enum;               testEnum()
    import misc::attributes;        testAttributes()
    import misc::ptr_arithmetic;    testPtrArithmetic()
    import misc::escape_analysis;   testEscapees()
    
    import texpr = test_expressions
    texpr.testExpressions()
    
    testLiterals()
    testConsts()
    testArrays()
	
    testGlobals {
        assert dd is int**
        assert ee is int***
    }
    test0 {
        int a1 = 3
        int b1 = a1 - 2

        myfunc(true)

        [int, float] anon

        Animal* animal
        Animal** animal2
        AnimalPtr animalPtr
        IntPtr ip
        
        var animal3 = Animal()
        animal3.bark()
        dothings(0, animal3)

        Thingy thingy = Thingy()
        thingy.a = 9

        someArrays()
    }
    test1 {
        {void->int} b = { return 1 }
    }
    test2 {
        {void->[int a,int b]} f = {
            return [1,2]
        }

        var r = f()
        [int a, float b] r2 = r as [int,float]

        var a = r.a
        var b = r.b
        assert a==1
        assert b==2

        assert r2.a==1

        // reinterpret cast int to float won't be 2
        //assert r2.b==2
    }
    test3 {
        struct Listy <T> {
            T length
        }

        Listy<int> list = Listy<int>()
        Array<int,float> array
        Rose<int> rose
        ANiceRose anicerose
        Listy<BlueRose> blueList
        Listy<Listy<int>> listoflist
    }
    test4 {
        //float2 v2
        //float3 v3
        //float4 v4
        //float8 v8
    }
    testInnerImport {
        import imports::imports3

        assert 77 == i3func()
        I3Object obj = I3Object()
    }

    testGlobals()
    test0()
    test1()
    test2()
    test3()
    test4()
    testInnerImport()

    import access::access
    testAccess()

    testModules()
    testStatements()
    testExpressions() 
    testFunctions()
    testStructures()
    testTemplates()
    testCore()
    GC.dump()
}
bool yop

testModules {
    import misc::unreferenced_module

    testImports()
    
    importedFunc()  
    
    Cat cat             // from test_imports
    Dog dog1 = Dog()
    dog1.age += 1
    
    Dog* dog2 = null     // from test_imports
    dog2 = &dog1
    dog2 = null
    
    var dog3 = Dog*()
    
    alias GreyWolf = Wolf
    GreyWolf wolf
    
    [int, Bat berty] bertyStruct
}
testStatements {
    import l = nodes::loop, 
           v = nodes::variable

    l.testLoop()
    v.testVariables()
}
testExpressions {
    import nodes::as, 
           nodes::if, 
           tuples::literal_tuple   
    
    testAs()
    testIf()
    testLiteralTuple()
}
testFunctions {
    import functions::calls, functions::inner_functions

    testCalls()
    testInnerFunctions()
}
testStructures {
    import structs::structs, 
           structs::constructors, 
           structs::statics, 
           structs::operator_overloading

    testStructs()
    testConstructors()
    testStatics()
    testOperatorOverloading()
}
testTemplates {
    import templates::template_functions, 
           templates::template_structs,
           templates::implicit_template_funcs
           
    testTemplateStructs()
    testTemplateFunctions()
    testImplicitTemplateFunctions()
}
testCore {
    import core_::console, 
           core_::list, 
           core_::string, 
           core_::unsigned

    testConsole()   
    testList()   
    testString()
    testUnsigned()
}

