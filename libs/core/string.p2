@module(priority=-900_000)

public

//=================================================================================================
// Standard or small string
//=================================================================================================
struct string { // 16 bytes
    byte* basePtr
    int offset
readonly
    int length
public 
    new { byte* ptr, int offset, int len ->
        this.basePtr = ptr
        this.offset  = offset
        this.length  = len
    }
    static of { int v ->
          // todo     
    }
    ptr   { return basePtr+offset }
    empty { return length==0 }
    first { assert not empty(); return ptr()[0] }
    last  { assert not empty(); return ptr()[length-1] }
    
    cstr {
        // todo - this might seg fault
        if(ptr()[length]==0) return ptr() 
            
        var copy = GC.alloc(length+1) as byte*
        memcpy(copy, ptr(), length)
        copy[length] = 0 as byte
        
        return copy
    }
    
    operator[] { int index-> return ptr()[index] }
    
    operator== { string s -> 
        return length==s.length and memcmp(ptr(), s.ptr(), length) == 0 
    } 
           
    indexOf { int ch ->
        var p = memchr(ptr(), ch, length)
        return if(p) (p-ptr()) as int else -1
    }
    indexOf { string s ->
        //return indexOf(s, 0)  // fixme
        return this.indexOf(s, 0)
    }
    indexOf { int ch, int startIndex ->
        if(startIndex<0 or startIndex>=length) return -1
        var p = memchr(basePtr+offset+startIndex, ch, length-startIndex)
        return if(p) (p-ptr()) as int else -1
    }
    indexOf { string s, int startIndex ->
        if(s.empty()) return -1
        if(startIndex<0) return -1
            
        var end = length-s.length
        if(end<0) return -1
        
        loop(int pos=startIndex; pos<=end; pos += 1) {
            pos = indexOf(s.first(), pos)
            
            select(pos) {
                -1 : break
                else : {
                    if(memcmp(ptr()+pos, s.ptr(), s.length)==0) return pos 
                }   
            }
        }
        return -1   
    }
    startsWith { int ch ->
        return length>0 and ptr()[0]==ch   
    }
    startsWith { string s ->
        return length >= s.length and memcmp(ptr(), s.ptr(), s.length) == 0           
    }
    endsWith { int ch ->
        return length>0 and ptr()[length-1]==ch 
    }
    endsWith { string s ->
        if(s.length==0) return false
        var off = length-s.length;
        return length >= s.length and memcmp(ptr()+off, s.ptr(), s.length) == 0   
    }
    contains { int ch ->
        return indexOf(ch) <> -1   
    }
    contains { string s ->
        return indexOf(s) <> -1
    }
    trim {
        // todo   
        assert false
    }
    toInt { int default ->
        var value = 0
        var mul   = 1
            
        loop(int i = length-1; i>=0; i -= 1) {
             //var ch = this[i] - '0' // fixme
            var ch = operator[](i) - '0'
            if(ch<0 or ch>9) return default    
            value += ch*mul
            mul   *= 10     
        }
        return value          
    }
    toFloat { float default -> 
        assert false
    }    
private

}
//=================================================================================================
// Large string
//=================================================================================================
struct lstring { // 24 bytes
    byte* basePtr
    long offset
readonly
    long length
public
        
}
    
private    
new {
    assert #sizeof(string)==16   
    assert #sizeof(lstring)==24   
}
